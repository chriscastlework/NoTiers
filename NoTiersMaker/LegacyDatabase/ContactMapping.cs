// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.52
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace CustomLogic.LegacyDatabase
{

    // Contacts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public partial class ContactMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Contact>
    {
        public ContactMapping()
            : this("dbo")
        {
        }

        public ContactMapping(string schema)
        {
            ToTable("Contacts", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Location).HasColumnName(@"Location").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Skype).HasColumnName(@"Skype").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.OrganisationId).HasColumnName(@"OrganisationId").HasColumnType("int").IsRequired();
            Property(x => x.JobTitle).HasColumnName(@"JobTitle").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime2").IsRequired();
            Property(x => x.DateLastModeified).HasColumnName(@"DateLastModeified").HasColumnType("datetime2").IsRequired();
            Property(x => x.CreatedById).HasColumnName(@"CreatedById").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.LastModifiedById).HasColumnName(@"LastModifiedById").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.AccountId).HasColumnName(@"AccountId").HasColumnType("int").IsOptional();
            Property(x => x.LogoImageId).HasColumnName(@"LogoImage_Id").HasColumnType("int").IsOptional();
            Property(x => x.ExternalId).HasColumnName(@"ExternalId").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.SalesProcessId).HasColumnName(@"SalesProcessId").HasColumnType("int").IsOptional();
            Property(x => x.StageId).HasColumnName(@"StageId").HasColumnType("int").IsOptional();
            Property(x => x.Notes).HasColumnName(@"Notes").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.OfficePhone).HasColumnName(@"OfficePhone").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MobilePhone).HasColumnName(@"MobilePhone").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.OtherPhone).HasColumnName(@"OtherPhone").HasColumnType("nvarchar(max)").IsOptional();

            // Foreign keys
            HasOptional(a => a.Account).WithMany(b => b.Contacts).HasForeignKey(c => c.AccountId).WillCascadeOnDelete(false); // FK_dbo.Contacts_dbo.Accounts_AccountId
            HasOptional(a => a.CreatedBy).WithMany(b => b.Contacts_CreatedById).HasForeignKey(c => c.CreatedById).WillCascadeOnDelete(false); // FK_dbo.Contacts_dbo.Users_CreatedById
            HasOptional(a => a.LastModifiedBy).WithMany(b => b.Contacts_LastModifiedById).HasForeignKey(c => c.LastModifiedById).WillCascadeOnDelete(false); // FK_dbo.Contacts_dbo.Users_LastModifiedById
            HasOptional(a => a.LogoImage).WithMany(b => b.Contacts).HasForeignKey(c => c.LogoImageId).WillCascadeOnDelete(false); // FK_dbo.Contacts_dbo.LogoImages_LogoImage_Id
            HasOptional(a => a.SalesProcess).WithMany(b => b.Contacts).HasForeignKey(c => c.SalesProcessId).WillCascadeOnDelete(false); // FK_dbo.Contacts_dbo.SalesProcesses_SalesProcessId
            HasOptional(a => a.Stage).WithMany(b => b.Contacts).HasForeignKey(c => c.StageId).WillCascadeOnDelete(false); // FK_dbo.Contacts_dbo.Stages_StageId
            HasRequired(a => a.Organisation).WithMany(b => b.Contacts).HasForeignKey(c => c.OrganisationId); // FK_dbo.Contacts_dbo.Organisations_OrganisationId
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
