// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.52
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace CustomLogic.LegacyDatabase
{

    // Deals
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public partial class DealMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Deal>
    {
        public DealMapping()
            : this("dbo")
        {
        }

        public DealMapping(string schema)
        {
            ToTable("Deals", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.OwnerId).HasColumnName(@"OwnerId").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.ExpectedCloseDate).HasColumnName(@"ExpectedCloseDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.RevenueCurrency).HasColumnName(@"RevenueCurrency").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.RevenueAmount).HasColumnName(@"RevenueAmount").HasColumnType("decimal").IsRequired().HasPrecision(18,2);
            Property(x => x.StageId).HasColumnName(@"StageId").HasColumnType("int").IsOptional();
            Property(x => x.MainDealContactId).HasColumnName(@"MainDealContactId").HasColumnType("int").IsOptional();
            Property(x => x.AccountId).HasColumnName(@"AccountId").HasColumnType("int").IsOptional();
            Property(x => x.SalesProcessId).HasColumnName(@"SalesProcessId").HasColumnType("int").IsOptional();
            Property(x => x.CloseDate).HasColumnName(@"CloseDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.CloseReason).HasColumnName(@"CloseReason").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.CloseStatus).HasColumnName(@"CloseStatus").HasColumnType("int").IsOptional();
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime2").IsOptional();
            Property(x => x.DateLastModeified).HasColumnName(@"DateLastModeified").HasColumnType("datetime2").IsOptional();
            Property(x => x.CreatedById).HasColumnName(@"CreatedById").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.LastModifiedById).HasColumnName(@"LastModifiedById").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.StageLastUpdated).HasColumnName(@"StageLastUpdated").HasColumnType("datetime2").IsOptional();
            Property(x => x.Overview).HasColumnName(@"Overview").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.TrashDate).HasColumnName(@"TrashDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.TrashedUserId).HasColumnName(@"TrashedUserId").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.DealType).HasColumnName(@"DealType").HasColumnType("int").IsRequired();
            Property(x => x.LeadRating).HasColumnName(@"LeadRating").HasColumnType("int").IsOptional();
            Property(x => x.LeadFollowUpDate).HasColumnName(@"LeadFollowUpDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.LeadConversionApproverId).HasColumnName(@"LeadConversionApproverId").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.LeadContactId).HasColumnName(@"LeadContactId").HasColumnType("int").IsOptional();
            Property(x => x.LeadPotentialRevenue).HasColumnName(@"LeadPotentialRevenue").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.LeadStatusId).HasColumnName(@"LeadStatusId").HasColumnType("int").IsOptional();
            Property(x => x.ExternalId).HasColumnName(@"ExternalId").HasColumnType("nvarchar(max)").IsOptional();

            // Foreign keys
            HasOptional(a => a.Account).WithMany(b => b.Deals).HasForeignKey(c => c.AccountId).WillCascadeOnDelete(false); // FK_dbo.Deals_dbo.Accounts_Account_Id
            HasOptional(a => a.Contact).WithMany(b => b.Deals).HasForeignKey(c => c.LeadContactId).WillCascadeOnDelete(false); // FK_dbo.Deals_dbo.Contacts_LeadContactId
            HasOptional(a => a.CreatedBy).WithMany(b => b.Deals_CreatedById).HasForeignKey(c => c.CreatedById).WillCascadeOnDelete(false); // FK_dbo.Deals_dbo.Users_CreatedById
            HasOptional(a => a.Currency).WithMany(b => b.Deals).HasForeignKey(c => c.RevenueCurrency).WillCascadeOnDelete(false); // FK_dbo.Deals_dbo.Currencies_RevenueCurrency
            HasOptional(a => a.LastModifiedBy).WithMany(b => b.Deals_LastModifiedById).HasForeignKey(c => c.LastModifiedById).WillCascadeOnDelete(false); // FK_dbo.Deals_dbo.Users_LastModifiedById
            HasOptional(a => a.LeadConversionApprover).WithMany(b => b.LeadConversionApprover).HasForeignKey(c => c.LeadConversionApproverId).WillCascadeOnDelete(false); // FK_dbo.Deals_dbo.Users_LeadConversionApprover_Id
            HasOptional(a => a.LeadStatu).WithMany(b => b.Deals).HasForeignKey(c => c.LeadStatusId).WillCascadeOnDelete(false); // FK_dbo.Deals_dbo.LeadStatus_LeadStatus_Id
            HasOptional(a => a.Owner).WithMany(b => b.Deals_OwnerId).HasForeignKey(c => c.OwnerId).WillCascadeOnDelete(false); // FK_dbo.Deals_dbo.Users_OwnerId
            HasOptional(a => a.SalesProcess).WithMany(b => b.Deals).HasForeignKey(c => c.SalesProcessId).WillCascadeOnDelete(false); // FK_dbo.Deals_dbo.SalesProcesses_SalesProcessId
            HasOptional(a => a.Stage).WithMany(b => b.Deals).HasForeignKey(c => c.StageId).WillCascadeOnDelete(false); // FK_dbo.Deals_dbo.Stages_StageId
            HasOptional(a => a.TrashedUser).WithMany(b => b.TrashedUser).HasForeignKey(c => c.TrashedUserId).WillCascadeOnDelete(false); // FK_dbo.Deals_dbo.Users_TrashedUserId
            HasMany(t => t.Users).WithMany(t => t.WatchedDeal).Map(m =>
            {
                m.ToTable("DealWatchingUsers", "dbo");
                m.MapLeftKey("WatchedDealId");
                m.MapRightKey("WatchingUserId");
            });
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
