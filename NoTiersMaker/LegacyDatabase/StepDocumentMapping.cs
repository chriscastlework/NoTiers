// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.52
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace CustomLogic.LegacyDatabase
{

    // StepDocuments
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public partial class StepDocumentMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StepDocument>
    {
        public StepDocumentMapping()
            : this("dbo")
        {
        }

        public StepDocumentMapping(string schema)
        {
            ToTable("StepDocuments", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.DealId).HasColumnName(@"DealId").HasColumnType("int").IsOptional();
            Property(x => x.StepId).HasColumnName(@"StepId").HasColumnType("int").IsRequired();
            Property(x => x.OriginalName).HasColumnName(@"OriginalName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Extension).HasColumnName(@"Extension").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ContentType).HasColumnName(@"ContentType").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Size).HasColumnName(@"Size").HasColumnType("bigint").IsRequired();
            Property(x => x.Content).HasColumnName(@"Content").HasColumnType("varbinary").IsOptional();
            Property(x => x.Uploaded).HasColumnName(@"Uploaded").HasColumnType("datetime2").IsRequired();
            Property(x => x.CustomTableRowId).HasColumnName(@"CustomTableRowId").HasColumnType("bigint").IsOptional();
            Property(x => x.LeadId).HasColumnName(@"LeadId").HasColumnType("int").IsOptional();
            Property(x => x.AccountId).HasColumnName(@"AccountId").HasColumnType("int").IsOptional();
            Property(x => x.PartnerId).HasColumnName(@"PartnerId").HasColumnType("int").IsOptional();
            Property(x => x.TaskId).HasColumnName(@"TaskId").HasColumnType("int").IsOptional();
            Property(x => x.CountactId).HasColumnName(@"CountactId").HasColumnType("int").IsOptional();
            Property(x => x.ContactId).HasColumnName(@"Contact_Id").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Account_AccountId).WithMany(b => b.AccountId).HasForeignKey(c => c.AccountId).WillCascadeOnDelete(false); // FK_dbo.StepDocuments_dbo.Accounts_AccountId
            HasOptional(a => a.Contact).WithMany(b => b.StepDocuments).HasForeignKey(c => c.ContactId).WillCascadeOnDelete(false); // FK_dbo.StepDocuments_dbo.Contacts_Contact_Id
            HasOptional(a => a.CustomObjectRow).WithMany(b => b.StepDocuments).HasForeignKey(c => c.CustomTableRowId).WillCascadeOnDelete(false); // FK_dbo.StepDocuments_dbo.CustomObjectRows_CustomTableRowId
            HasOptional(a => a.Deal_DealId).WithMany(b => b.DealId).HasForeignKey(c => c.DealId).WillCascadeOnDelete(false); // FK_dbo.StepDocuments_dbo.Deals_DealId
            HasOptional(a => a.Lead).WithMany(b => b.Lead).HasForeignKey(c => c.LeadId).WillCascadeOnDelete(false); // FK_dbo.StepDocuments_dbo.Deals_LeadId
            HasOptional(a => a.Partner).WithMany(b => b.Partner).HasForeignKey(c => c.PartnerId).WillCascadeOnDelete(false); // FK_dbo.StepDocuments_dbo.Accounts_PartnerId
            HasOptional(a => a.Task).WithMany(b => b.StepDocuments).HasForeignKey(c => c.TaskId).WillCascadeOnDelete(false); // FK_dbo.StepDocuments_dbo.Tasks_TaskId
            HasRequired(a => a.Step).WithMany(b => b.StepDocuments).HasForeignKey(c => c.StepId); // FK_dbo.StepDocuments_dbo.Steps_StepId
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
