// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.52
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace CustomLogic.LegacyDatabase
{

    // Accounts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public partial class AccountMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Account>
    {
        public AccountMapping()
            : this("dbo")
        {
        }

        public AccountMapping(string schema)
        {
            ToTable("Accounts", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.RevenueCurrency).HasColumnName(@"RevenueCurrency").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.RevenueAmount).HasColumnName(@"RevenueAmount").HasColumnType("decimal").IsRequired().HasPrecision(18,2);
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.County).HasColumnName(@"County").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.PostCode).HasColumnName(@"PostCode").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MainContactIndex).HasColumnName(@"MainContactIndex").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.OwnerId).HasColumnName(@"OwnerId").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").HasColumnType("datetime2").IsOptional();
            Property(x => x.DateLastModeified).HasColumnName(@"DateLastModeified").HasColumnType("datetime2").IsOptional();
            Property(x => x.CreatedById).HasColumnName(@"CreatedById").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.LastModifiedById).HasColumnName(@"LastModifiedById").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.LogoImageId).HasColumnName(@"LogoImage_Id").HasColumnType("int").IsOptional();
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Country).HasColumnName(@"Country").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.AccountType).HasColumnName(@"AccountType").HasColumnType("int").IsRequired();
            Property(x => x.ExternalId).HasColumnName(@"ExternalId").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.SalesProcessId).HasColumnName(@"SalesProcessId").HasColumnType("int").IsOptional();
            Property(x => x.StageId).HasColumnName(@"StageId").HasColumnType("int").IsOptional();
            Property(x => x.Notes).HasColumnName(@"Notes").HasColumnType("nvarchar(max)").IsOptional();

            // Foreign keys
            HasOptional(a => a.CreatedBy).WithMany(b => b.CreatedBy).HasForeignKey(c => c.CreatedById).WillCascadeOnDelete(false); // FK_dbo.Accounts_dbo.Users_CreatedById
            HasOptional(a => a.LastModifiedBy).WithMany(b => b.Accounts_LastModifiedById).HasForeignKey(c => c.LastModifiedById).WillCascadeOnDelete(false); // FK_dbo.Accounts_dbo.Users_LastModifiedById
            HasOptional(a => a.LogoImage).WithMany(b => b.Accounts).HasForeignKey(c => c.LogoImageId).WillCascadeOnDelete(false); // FK_dbo.Accounts_dbo.LogoImages_LogoImage_Id
            HasOptional(a => a.SalesProcess).WithMany(b => b.Accounts).HasForeignKey(c => c.SalesProcessId).WillCascadeOnDelete(false); // FK_dbo.Accounts_dbo.SalesProcesses_SalesProcessId
            HasOptional(a => a.Stage).WithMany(b => b.Accounts).HasForeignKey(c => c.StageId).WillCascadeOnDelete(false); // FK_dbo.Accounts_dbo.Stages_StageId
            HasOptional(a => a.User1).WithMany(b => b.Accounts_OwnerId).HasForeignKey(c => c.OwnerId).WillCascadeOnDelete(false); // FK__Accounts__OwnerI__7A8729A3
            HasOptional(a => a.User2).WithMany(b => b.Accounts1).HasForeignKey(c => c.OwnerId).WillCascadeOnDelete(false); // FK__Accounts__OwnerI__7B7B4DDC
            HasOptional(a => a.User3).WithMany(b => b.Accounts2).HasForeignKey(c => c.OwnerId).WillCascadeOnDelete(false); // FK__Accounts__OwnerI__7C6F7215
            HasMany(t => t.Users).WithMany(t => t.WatchedAccount).Map(m =>
            {
                m.ToTable("AccountWatchingUsers", "dbo");
                m.MapLeftKey("WatchedAccountId");
                m.MapRightKey("WatchingUserId");
            });
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
