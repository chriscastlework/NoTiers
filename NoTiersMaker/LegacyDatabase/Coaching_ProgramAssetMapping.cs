// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.52
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace CustomLogic.LegacyDatabase
{

    // ProgramAssets
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public partial class Coaching_ProgramAssetMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Coaching_ProgramAsset>
    {
        public Coaching_ProgramAssetMapping()
            : this("Coaching")
        {
        }

        public Coaching_ProgramAssetMapping(string schema)
        {
            ToTable("ProgramAssets", schema);
            HasKey(x => x.ProgramAssetId);

            Property(x => x.ProgramAssetId).HasColumnName(@"ProgramAssetId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProgramId).HasColumnName(@"ProgramID").HasColumnType("int").IsRequired();
            Property(x => x.AssetId).HasColumnName(@"AssetID").HasColumnType("int").IsRequired();
            Property(x => x.StageOrder).HasColumnName(@"StageOrder").HasColumnType("int").IsOptional();

            // Foreign keys
            HasRequired(a => a.Coaching_Asset).WithMany(b => b.Coaching_ProgramAssets).HasForeignKey(c => c.AssetId).WillCascadeOnDelete(false); // FK_Coaching.ProgramAssets_Coaching.Assets_AssetID
            HasRequired(a => a.Coaching_Program).WithMany(b => b.Coaching_ProgramAssets).HasForeignKey(c => c.ProgramId).WillCascadeOnDelete(false); // FK_Coaching.ProgramAssets_Coaching.Programs_ProgramID
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
