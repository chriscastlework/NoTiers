// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.52
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace CustomLogic.LegacyDatabase
{

    // umbracoAccess
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public partial class UmbracoAccessMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UmbracoAccess>
    {
        public UmbracoAccessMapping()
            : this("dbo")
        {
        }

        public UmbracoAccessMapping(string schema)
        {
            ToTable("umbracoAccess", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.NodeId).HasColumnName(@"nodeId").HasColumnType("int").IsRequired();
            Property(x => x.LoginNodeId).HasColumnName(@"loginNodeId").HasColumnType("int").IsRequired();
            Property(x => x.NoAccessNodeId).HasColumnName(@"noAccessNodeId").HasColumnType("int").IsRequired();
            Property(x => x.CreateDate).HasColumnName(@"createDate").HasColumnType("datetime").IsRequired();
            Property(x => x.UpdateDate).HasColumnName(@"updateDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.LoginNode).WithMany(b => b.LoginNode).HasForeignKey(c => c.LoginNodeId).WillCascadeOnDelete(false); // FK_umbracoAccess_umbracoNode_id1
            HasRequired(a => a.NoAccessNode).WithMany(b => b.NoAccessNode).HasForeignKey(c => c.NoAccessNodeId).WillCascadeOnDelete(false); // FK_umbracoAccess_umbracoNode_id2
            HasRequired(a => a.Node).WithMany(b => b.Node).HasForeignKey(c => c.NodeId).WillCascadeOnDelete(false); // FK_umbracoAccess_umbracoNode_id
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
