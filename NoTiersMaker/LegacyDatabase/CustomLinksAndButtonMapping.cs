// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.52
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace CustomLogic.LegacyDatabase
{

    // CustomLinksAndButtons
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public partial class CustomLinksAndButtonMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CustomLinksAndButton>
    {
        public CustomLinksAndButtonMapping()
            : this("dbo")
        {
        }

        public CustomLinksAndButtonMapping(string schema)
        {
            ToTable("CustomLinksAndButtons", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Label).HasColumnName(@"Label").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.IconType).HasColumnName(@"IconType").HasColumnType("int").IsRequired();
            Property(x => x.IconClass).HasColumnName(@"IconClass").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.IconImage).HasColumnName(@"IconImage").HasColumnType("varbinary").IsOptional();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            Property(x => x.CustomLinksButtonPlacementId).HasColumnName(@"CustomLinksButtonPlacement_Id").HasColumnType("int").IsOptional();
            Property(x => x.CustomLinksUrlId).HasColumnName(@"CustomLinksUrl_Id").HasColumnType("int").IsOptional();
            Property(x => x.OrganisationId).HasColumnName(@"OrganisationId").HasColumnType("int").IsRequired();
            Property(x => x.Action).HasColumnName(@"Action").HasColumnType("int").IsRequired();
            Property(x => x.ButtonType).HasColumnName(@"ButtonType").HasColumnType("int").IsRequired();
            Property(x => x.EntityType).HasColumnName(@"EntityType").HasColumnType("int").IsRequired();
            Property(x => x.PlacementCustomObjectKey).HasColumnName(@"PlacementCustomObjectKey").HasColumnType("nvarchar(max)").IsOptional();

            // Foreign keys
            HasOptional(a => a.CustomLinksButtonPlacement).WithMany(b => b.CustomLinksAndButtons).HasForeignKey(c => c.CustomLinksButtonPlacementId).WillCascadeOnDelete(false); // FK_dbo.CustomObjects_dbo.CustomObjectButtonPlacements_CustomObjectButtonPlacement_Id
            HasOptional(a => a.CustomLinksUrl).WithMany(b => b.CustomLinksAndButtons).HasForeignKey(c => c.CustomLinksUrlId).WillCascadeOnDelete(false); // FK_dbo.CustomObjects_dbo.CustomObjectUrls_CustomObjectUrl_Id
            HasRequired(a => a.Organisation).WithMany(b => b.CustomLinksAndButtons).HasForeignKey(c => c.OrganisationId); // FK_dbo.CustomObjects_dbo.Organisations_OrganisationId
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
