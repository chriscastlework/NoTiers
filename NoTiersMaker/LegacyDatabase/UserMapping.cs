// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.52
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace CustomLogic.LegacyDatabase
{

    // Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public partial class UserMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<User>
    {
        public UserMapping()
            : this("dbo")
        {
        }

        public UserMapping(string schema)
        {
            ToTable("Users", schema);
            HasKey(x => x.UserId);

            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.EmailConfirmed).HasColumnName(@"EmailConfirmed").HasColumnType("bit").IsRequired();
            Property(x => x.PasswordHash).HasColumnName(@"PasswordHash").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.SecurityStamp).HasColumnName(@"SecurityStamp").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.PhoneNumberConfirmed).HasColumnName(@"PhoneNumberConfirmed").HasColumnType("bit").IsRequired();
            Property(x => x.TwoFactorEnabled).HasColumnName(@"TwoFactorEnabled").HasColumnType("bit").IsRequired();
            Property(x => x.LockoutEndDateUtc).HasColumnName(@"LockoutEndDateUtc").HasColumnType("datetime2").IsOptional();
            Property(x => x.LockoutEnabled).HasColumnName(@"LockoutEnabled").HasColumnType("bit").IsRequired();
            Property(x => x.AccessFailedCount).HasColumnName(@"AccessFailedCount").HasColumnType("int").IsRequired();
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.OrganisationId1).HasColumnName(@"OrganisationId").HasColumnType("int").IsOptional();
            Property(x => x.UserStatus).HasColumnName(@"UserStatus").HasColumnType("int").IsOptional();
            Property(x => x.UserProfileId).HasColumnName(@"UserProfileId").HasColumnType("int").IsOptional();
            Property(x => x.TaskId).HasColumnName(@"Task_Id").HasColumnType("int").IsOptional();
            Property(x => x.VerificationCode).HasColumnName(@"VerificationCode").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.OrganisationId).HasColumnName(@"Organisation_Id").HasColumnType("int").IsOptional();
            Property(x => x.SystemPreferencesId).HasColumnName(@"SystemPreferences_Id").HasColumnType("int").IsOptional();
            Property(x => x.LogoImageId).HasColumnName(@"LogoImage_Id").HasColumnType("int").IsOptional();
            Property(x => x.LoginCount).HasColumnName(@"LoginCount").HasColumnType("int").IsOptional();
            Property(x => x.CreateDateTime).HasColumnName(@"CreateDateTime").HasColumnType("datetime2").IsOptional();
            Property(x => x.ManagerId).HasColumnName(@"ManagerId").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.ExternalId).HasColumnName(@"ExternalId").HasColumnType("nvarchar(max)").IsOptional();

            // Foreign keys
            HasOptional(a => a.LogoImage).WithMany(b => b.Users).HasForeignKey(c => c.LogoImageId).WillCascadeOnDelete(false); // FK_dbo.Users_dbo.LogoImages_LogoImage_Id
            HasOptional(a => a.Manager).WithMany(b => b.Users).HasForeignKey(c => c.ManagerId).WillCascadeOnDelete(false); // FK_dbo.Users_dbo.Users_ManagerId
            HasOptional(a => a.Organisation).WithMany(b => b.Users).HasForeignKey(c => c.OrganisationId).WillCascadeOnDelete(false); // FK_dbo.Users_dbo.Organisations_Organisation_Id
            HasOptional(a => a.SystemPreference).WithMany(b => b.Users).HasForeignKey(c => c.SystemPreferencesId).WillCascadeOnDelete(false); // FK_dbo.Users_dbo.SystemPreferences_SystemPreferences_Id
            HasOptional(a => a.Task).WithMany(b => b.Users).HasForeignKey(c => c.TaskId).WillCascadeOnDelete(false); // FK_dbo.Users_dbo.Tasks_Task_Id
            HasOptional(a => a.UserProfile).WithMany(b => b.Users).HasForeignKey(c => c.UserProfileId).WillCascadeOnDelete(false); // FK_dbo.Users_dbo.UserProfiles_UserProfileId
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
