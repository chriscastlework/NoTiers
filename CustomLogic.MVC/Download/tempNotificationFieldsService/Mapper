using System.Linq;

namespace CustomLogic.Services.TempNotificationFieldsService
{
public static class TempNotificationFieldsMapper
{

public static TempNotificationField MapInsertModelToDbModel(TempNotificationFieldsViewModel model, TempNotificationField newDomainModel = null)
{
    if (newDomainModel == null)
    {
    newDomainModel = new TempNotificationField();
    }

            newDomainModel.Id = model.Id;
            newDomainModel.FieldName = model.FieldName;
            newDomainModel.OldValue = model.OldValue;
            newDomainModel.NewValue = model.NewValue;
            newDomainModel.Notification_Id = model.Notification_Id;
    return newDomainModel;
    }



public static TempNotificationFieldsViewModel MapDbModelToViewModel(TempNotificationField dbModel)
{
var viewModel = new  TempNotificationFieldsViewModel();

            viewModel.Id = dbModel.Id;
            viewModel.FieldName = dbModel.FieldName;
            viewModel.OldValue = dbModel.OldValue;
            viewModel.NewValue = dbModel.NewValue;
            viewModel.Notification_Id = dbModel.Notification_Id;

return viewModel;
}


public static IQueryable<TempNotificationFieldsViewModel> MapDbModelQueryToViewModelQuery(IQueryable<TempNotificationField> databaseQuery)
{ 

        return databaseQuery.OrderByDescending(c=>c.Id).Select(c => new TempNotificationFieldsViewModel()
        {
Id = c.Id,
FieldName = c.FieldName,
OldValue = c.OldValue,
NewValue = c.NewValue,
Notification_Id = c.Notification_Id,
        });
        }
    }
}


