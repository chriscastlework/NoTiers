using System;
using System.Linq;
using System.Net;
using System.Web.Mvc;
using CustomLogic;
using CustomLogic.Core.Interfaces;
using CustomLogic.Core.Models;
using CustomLogic.Services.CustomLinksUrlsService;


public class CustomLinksUrlsController : Controller
{
    //private AomDbContext db = new AomDbContext();
    private readonly IService<CustomLinksUrlsViewModel>_CustomLinksUrlsService = new CustomLinksUrlsService(new DbContext());


        // GET: CustomLinksUrls
        public ActionResult Index()
        {
        return View(_CustomLinksUrls
        Service.List(new NgTableParams() {page = 1, count = 1000}, null).Data.ToList());
        }

        // GET: CustomLinksUrls/Details/5
        public ActionResult Details(Guid? id)
        {
        if (id == null)
        {
        return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
        }
        return View(_CustomLinksUrls
        Service.View(new CustomLinksUrls
        ViewModel() { ID = id.Value}, null));
        }

        // GET: CustomLinksUrls/Create
        public ActionResult Create()
        {
        return View();
        }

        // POST: CustomLinksUrls/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "Id,Name")] CustomLinksUrls
        ViewModel aomMeta)
        {
        if (ModelState.IsValid)
        {
        var result =_CustomLinksUrls
        Service.Insert(aomMeta, null);
        if(result.Success)
        return RedirectToAction("Index");

        // what if it went wrong?
        }

        return View(aomMeta);
        }

        // GET: CustomLinksUrls
        s/Edit/5
        public ActionResult Edit(Guid? id)
        {
        if (id == null)
        {
        return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
        }
        var result = _CustomLinksUrls
        Service.View(new CustomLinksUrls
        ViewModel {ID = id.Value}, null);
        if (!result.Success)
        {
        return HttpNotFound();
        }
        return View(result.Data);
        }

        // POST: CustomLinksUrls
        s/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "Id,Name")] CustomLinksUrls
        ViewModel aomMeta)
        {
        if (ModelState.IsValid)
        {
        var result = _CustomLinksUrls
        Service.Update(aomMeta, null);
        if(result.Success)
        return RedirectToAction("Index");

        // what if it goes wrong?
        }
        return View(aomMeta);
        }

        // GET: CustomLinksUrls
        s/Delete/5
        public ActionResult Delete(Guid? id)
        {
        if (id == null)
        {
        return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
        }
        var result = _CustomLinksUrls
        Service.View(new CustomLinksUrls
        ViewModel {ID = id.Value}, null);
        if (!result.Success)
        {
        return HttpNotFound();
        }
        return View(result.Data);
        }

        // POST: CustomLinksUrls
        s/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(Guid id)
        {
        var result = _CustomLinksUrls
        Service.Delete(new CustomLinksUrls
        ViewModel {ID = id}, null);
        return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
        if (disposing)
        {
        // _CustomLinksUrls
        Service = null; // make services disposeable?
        }
        base.Dispose(disposing);
        }
        }


