using System.Linq;

namespace CustomLogic.Services.RelationshipMetaService
{
public static class RelationshipMetaMapper
{

public static RelationshipMeta MapInsertModelToDbModel(RelationshipMetaViewModel model, RelationshipMeta newDomainModel = null)
{
    if (newDomainModel == null)
    {
    newDomainModel = new RelationshipMeta();
    }

            newDomainModel.Id = model.ID;
            newDomainModel.PkAomMetaId = model.PkAomMetaId;
            newDomainModel.FkAomMetaId = model.FkAomMetaId;
            newDomainModel.FkAomFieldMetaId = model.FkAomFieldMetaId;
            newDomainModel.Name = model.Name;
            newDomainModel.PkAomFieldMetaId = model.PkAomFieldMetaId;
    return newDomainModel;
    }



public static RelationshipMetaViewModel MapDbModelToViewModel(RelationshipMeta dbModel)
{
var viewModel = new  RelationshipMetaViewModel();

            viewModel.ID = dbModel.Id;
            viewModel.PkAomMetaId = dbModel.PkAomMetaId;
            viewModel.FkAomMetaId = dbModel.FkAomMetaId;
            viewModel.FkAomFieldMetaId = dbModel.FkAomFieldMetaId;
            viewModel.Name = dbModel.Name;
            viewModel.PkAomFieldMetaId = dbModel.PkAomFieldMetaId;

return viewModel;
}


public static IQueryable<RelationshipMetaViewModel> MapDbModelQueryToViewModelQuery(IQueryable<RelationshipMeta> databaseQuery)
{ 

        return databaseQuery.OrderByDescending(c=>c.Id).Select(c => new RelationshipMetaViewModel()
        {
ID = c.Id,
PkAomMetaId = c.PkAomMetaId,
FkAomMetaId = c.FkAomMetaId,
FkAomFieldMetaId = c.FkAomFieldMetaId,
Name = c.Name,
PkAomFieldMetaId = c.PkAomFieldMetaId,
        });
        }
    }
}


