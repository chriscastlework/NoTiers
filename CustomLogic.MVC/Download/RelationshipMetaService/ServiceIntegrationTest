using System.Diagnostics;
using System.Linq;
using CustomLogic.Core.Interfaces;
using CustomLogic.Core.Models;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CustomLogic.Services.RelationshipMetaService;
using Newtonsoft.Json;

namespace CustomLogic.Tests.IntegrationTests.RelationshipMetaServiceTests
{
        [TestClass]
        public class RelationshipMeta
        ServiceTests
        {


        public RelationshipMetaServiceTests()
        {
        // The default mock user
        mockUser = new CoreUser
        {

        };
        }

        public RelationshipMetaViewModel MakeDummyRecord()
        {
        return new RelationshipMetaViewModel() {
        Name = "Test Name" // how do we know it has a name
        }
        }

        private ICoreUser mockUser;

        private readonly IService<RelationshipMetaViewModel>
            RelationshipMetaService = new RelationshipMetaService(new DbContext());

            public Response<RelationshipMetaViewModel> RelationshipMeta Response { get; set; }

            [TestMethod]
            public void Insert()
            {
            // Arrange - Create a new account view model
            var new@Html.Raw(Model.TT_ViewModelName()
            ViewModel = ;


            // Act - send this to the insert method on the account service logic
            var Response = _RelationshipMetaService.Insert(new@Html.Raw(Model.TT_ViewModelName()
            ViewModel, mockUser);


            // Assert
            Assert.IsTrue(Response.Success);

            }

            [TestMethod]
            public void View()
            {
            // Arrange - insert a deal so that we can pull it out
            var result1 = _RelationshipMetaService.Insert(MakeDummyRecord(), mockUser);

            // Act
            var result = _RelationshipMeta
            Service.View(new RelationshipMeta
            ViewModel { Id = result1.Data.Id } , mockUser);

            // Assert
            Assert.IsTrue(result.Success);

            }

            [TestMethod]
            public void Update()
            {
            // Arrange - insert a deal so that we have something to edit
            var result2 = _RelationshipMeta
            Service.Insert(new RelationshipMeta
            ViewModel()
            {
            Name = "Test RelationshipMeta
            1"
            }
            , mockUser);

            // Act
            result2.Data.Name = "Changed name";
            var result = _RelationshipMeta
            Service.Update(result2.Data, mockUser);


            // Assert
            Assert.IsTrue(result.Success);
            Assert.IsTrue(result.Data.Name == result2.Data.Name);

            }

            [TestMethod]
            public void Delete()
            {
            // Arrange
            var result4 = _RelationshipMeta
            Service.Insert(new RelationshipMeta
            ViewModel()
            {
            Name = "Test RelationshipMeta
            which i will delete"
            }
            , mockUser);

            // Act
            var result = _RelationshipMeta
            Service.Delete(new RelationshipMeta
            ViewModel()
            { Id = result4.Data.Id }
            , mockUser);

            var result2 = _RelationshipMeta
            Service.View(new RelationshipMeta
            ViewModel()
            { Id = result4.Data.Id }
            , mockUser);

            // Assert
            Assert.IsTrue(result.Success);
            Assert.IsTrue(!result2.Success);
            }


            [TestMethod]
            public void Query()
            {

            // Arrange - insert a deal so that we have something to edit
            object filter = new { Id = "1" };

            #if DEBUG
            Stopwatch sw = new Stopwatch();
            sw.Start();
            #endif
            // Act
            var result = _RelationshipMeta
            Service.List(new NgTableParams
            {
            filter = JsonConvert.SerializeObject(filter)
            }, mockUser);

            #if DEBUG
            sw.Stop();
            var totalTime = sw.Elapsed.Seconds;
            #endif

            // Assert
            Assert.IsTrue(result.Success);
            Assert.IsTrue(result.Data.Any());

            }

            }
            }


